
// Code generated by stanc v2.29.2
#include <stan/model/model_header.hpp>
namespace joint_gal_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 25> locations_array__ = 
{" (found before start of program)",
 " (in '/home/mahdi/HD2/package_dev/LIM_LyTomo/notebooks/stan/joint_gal.stan', line 17, column 4 to column 24)",
 " (in '/home/mahdi/HD2/package_dev/LIM_LyTomo/notebooks/stan/joint_gal.stan', line 18, column 4 to column 30)",
 " (in '/home/mahdi/HD2/package_dev/LIM_LyTomo/notebooks/stan/joint_gal.stan', line 19, column 4 to column 19)",
 " (in '/home/mahdi/HD2/package_dev/LIM_LyTomo/notebooks/stan/joint_gal.stan', line 20, column 4 to column 19)",
 " (in '/home/mahdi/HD2/package_dev/LIM_LyTomo/notebooks/stan/joint_gal.stan', line 21, column 4 to column 23)",
 " (in '/home/mahdi/HD2/package_dev/LIM_LyTomo/notebooks/stan/joint_gal.stan', line 26, column 4 to column 61)",
 " (in '/home/mahdi/HD2/package_dev/LIM_LyTomo/notebooks/stan/joint_gal.stan', line 27, column 4 to column 72)",
 " (in '/home/mahdi/HD2/package_dev/LIM_LyTomo/notebooks/stan/joint_gal.stan', line 28, column 4 to column 78)",
 " (in '/home/mahdi/HD2/package_dev/LIM_LyTomo/notebooks/stan/joint_gal.stan', line 3, column 4 to column 10)",
 " (in '/home/mahdi/HD2/package_dev/LIM_LyTomo/notebooks/stan/joint_gal.stan', line 4, column 4 to column 13)",
 " (in '/home/mahdi/HD2/package_dev/LIM_LyTomo/notebooks/stan/joint_gal.stan', line 5, column 11 to column 12)",
 " (in '/home/mahdi/HD2/package_dev/LIM_LyTomo/notebooks/stan/joint_gal.stan', line 5, column 4 to column 17)",
 " (in '/home/mahdi/HD2/package_dev/LIM_LyTomo/notebooks/stan/joint_gal.stan', line 6, column 11 to column 12)",
 " (in '/home/mahdi/HD2/package_dev/LIM_LyTomo/notebooks/stan/joint_gal.stan', line 6, column 4 to column 21)",
 " (in '/home/mahdi/HD2/package_dev/LIM_LyTomo/notebooks/stan/joint_gal.stan', line 7, column 11 to column 12)",
 " (in '/home/mahdi/HD2/package_dev/LIM_LyTomo/notebooks/stan/joint_gal.stan', line 7, column 4 to column 21)",
 " (in '/home/mahdi/HD2/package_dev/LIM_LyTomo/notebooks/stan/joint_gal.stan', line 8, column 11 to column 12)",
 " (in '/home/mahdi/HD2/package_dev/LIM_LyTomo/notebooks/stan/joint_gal.stan', line 8, column 4 to column 25)",
 " (in '/home/mahdi/HD2/package_dev/LIM_LyTomo/notebooks/stan/joint_gal.stan', line 9, column 11 to column 12)",
 " (in '/home/mahdi/HD2/package_dev/LIM_LyTomo/notebooks/stan/joint_gal.stan', line 9, column 4 to column 27)",
 " (in '/home/mahdi/HD2/package_dev/LIM_LyTomo/notebooks/stan/joint_gal.stan', line 11, column 11 to column 12)",
 " (in '/home/mahdi/HD2/package_dev/LIM_LyTomo/notebooks/stan/joint_gal.stan', line 11, column 4 to column 27)",
 " (in '/home/mahdi/HD2/package_dev/LIM_LyTomo/notebooks/stan/joint_gal.stan', line 13, column 11 to column 12)",
 " (in '/home/mahdi/HD2/package_dev/LIM_LyTomo/notebooks/stan/joint_gal.stan', line 13, column 4 to column 31)"};




class joint_gal_model final : public model_base_crtp<joint_gal_model> {

 private:
  int N;
  double n3D;
  Eigen::Matrix<double, -1, 1> pm__;
  Eigen::Matrix<double, -1, 1> lim_pk__;
  Eigen::Matrix<double, -1, 1> gal_pk__;
  Eigen::Matrix<double, -1, 1> lim_gal_pk__;
  Eigen::Matrix<double, -1, 1> sigma_lim_pk__;
  Eigen::Matrix<double, -1, 1> sigma_gal_pk__;
  Eigen::Matrix<double, -1, 1> sigma_lim_gal_pk__; 
  Eigen::Map<Eigen::Matrix<double, -1, 1>> pm{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> lim_pk{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> gal_pk{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> lim_gal_pk{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> sigma_lim_pk{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> sigma_gal_pk{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> sigma_lim_gal_pk{nullptr, 0};
 
 public:
  ~joint_gal_model() { }
  
  inline std::string model_name() const final { return "joint_gal_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.29.2", "stancflags = "};
  }
  
  
  joint_gal_model(stan::io::var_context& context__,
                  unsigned int random_seed__ = 0,
                  std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "joint_gal_model_namespace::joint_gal_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 9;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      
      
      current_statement__ = 9;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 10;
      context__.validate_dims("data initialization","n3D","double",
           std::vector<size_t>{});
      n3D = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 10;
      n3D = context__.vals_r("n3D")[(1 - 1)];
      current_statement__ = 11;
      stan::math::validate_non_negative_index("pm", "N", N);
      current_statement__ = 12;
      context__.validate_dims("data initialization","pm","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      pm__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&pm) Eigen::Map<Eigen::Matrix<double, -1, 1>>(pm__.data(), N);
      
      {
        std::vector<local_scalar_t__> pm_flat__;
        current_statement__ = 12;
        pm_flat__ = context__.vals_r("pm");
        current_statement__ = 12;
        pos__ = 1;
        current_statement__ = 12;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 12;
          stan::model::assign(pm, pm_flat__[(pos__ - 1)],
            "assigning variable pm", stan::model::index_uni(sym1__));
          current_statement__ = 12;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 13;
      stan::math::validate_non_negative_index("lim_pk", "N", N);
      current_statement__ = 14;
      context__.validate_dims("data initialization","lim_pk","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      lim_pk__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&lim_pk) Eigen::Map<Eigen::Matrix<double, -1, 1>>(lim_pk__.data(), N);
        
      
      {
        std::vector<local_scalar_t__> lim_pk_flat__;
        current_statement__ = 14;
        lim_pk_flat__ = context__.vals_r("lim_pk");
        current_statement__ = 14;
        pos__ = 1;
        current_statement__ = 14;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 14;
          stan::model::assign(lim_pk, lim_pk_flat__[(pos__ - 1)],
            "assigning variable lim_pk", stan::model::index_uni(sym1__));
          current_statement__ = 14;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 15;
      stan::math::validate_non_negative_index("gal_pk", "N", N);
      current_statement__ = 16;
      context__.validate_dims("data initialization","gal_pk","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      gal_pk__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&gal_pk) Eigen::Map<Eigen::Matrix<double, -1, 1>>(gal_pk__.data(), N);
        
      
      {
        std::vector<local_scalar_t__> gal_pk_flat__;
        current_statement__ = 16;
        gal_pk_flat__ = context__.vals_r("gal_pk");
        current_statement__ = 16;
        pos__ = 1;
        current_statement__ = 16;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 16;
          stan::model::assign(gal_pk, gal_pk_flat__[(pos__ - 1)],
            "assigning variable gal_pk", stan::model::index_uni(sym1__));
          current_statement__ = 16;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 17;
      stan::math::validate_non_negative_index("lim_gal_pk", "N", N);
      current_statement__ = 18;
      context__.validate_dims("data initialization","lim_gal_pk","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      lim_gal_pk__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&lim_gal_pk) Eigen::Map<Eigen::Matrix<double, -1, 1>>(lim_gal_pk__.data(), N);
        
      
      {
        std::vector<local_scalar_t__> lim_gal_pk_flat__;
        current_statement__ = 18;
        lim_gal_pk_flat__ = context__.vals_r("lim_gal_pk");
        current_statement__ = 18;
        pos__ = 1;
        current_statement__ = 18;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 18;
          stan::model::assign(lim_gal_pk, lim_gal_pk_flat__[(pos__ - 1)],
            "assigning variable lim_gal_pk", stan::model::index_uni(sym1__));
          current_statement__ = 18;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 19;
      stan::math::validate_non_negative_index("sigma_lim_pk", "N", N);
      current_statement__ = 20;
      context__.validate_dims("data initialization","sigma_lim_pk","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      sigma_lim_pk__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&sigma_lim_pk) Eigen::Map<Eigen::Matrix<double, -1, 1>>(sigma_lim_pk__.data(), N);
        
      
      {
        std::vector<local_scalar_t__> sigma_lim_pk_flat__;
        current_statement__ = 20;
        sigma_lim_pk_flat__ = context__.vals_r("sigma_lim_pk");
        current_statement__ = 20;
        pos__ = 1;
        current_statement__ = 20;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 20;
          stan::model::assign(sigma_lim_pk, sigma_lim_pk_flat__[(pos__ - 1)],
            "assigning variable sigma_lim_pk", stan::model::index_uni(sym1__));
          current_statement__ = 20;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 21;
      stan::math::validate_non_negative_index("sigma_gal_pk", "N", N);
      current_statement__ = 22;
      context__.validate_dims("data initialization","sigma_gal_pk","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      sigma_gal_pk__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&sigma_gal_pk) Eigen::Map<Eigen::Matrix<double, -1, 1>>(sigma_gal_pk__.data(), N);
        
      
      {
        std::vector<local_scalar_t__> sigma_gal_pk_flat__;
        current_statement__ = 22;
        sigma_gal_pk_flat__ = context__.vals_r("sigma_gal_pk");
        current_statement__ = 22;
        pos__ = 1;
        current_statement__ = 22;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 22;
          stan::model::assign(sigma_gal_pk, sigma_gal_pk_flat__[(pos__ - 1)],
            "assigning variable sigma_gal_pk", stan::model::index_uni(sym1__));
          current_statement__ = 22;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 23;
      stan::math::validate_non_negative_index("sigma_lim_gal_pk", "N", N);
      current_statement__ = 24;
      context__.validate_dims("data initialization","sigma_lim_gal_pk",
          "double", std::vector<size_t>{static_cast<size_t>(N)});
      sigma_lim_gal_pk__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&sigma_lim_gal_pk) Eigen::Map<Eigen::Matrix<double, -1, 1>>(sigma_lim_gal_pk__.data(), N);
        
      
      {
        std::vector<local_scalar_t__> sigma_lim_gal_pk_flat__;
        current_statement__ = 24;
        sigma_lim_gal_pk_flat__ = context__.vals_r("sigma_lim_gal_pk");
        current_statement__ = 24;
        pos__ = 1;
        current_statement__ = 24;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 24;
          stan::model::assign(sigma_lim_gal_pk,
            sigma_lim_gal_pk_flat__[(pos__ - 1)],
            "assigning variable sigma_lim_gal_pk", stan::model::index_uni(sym1__));
          current_statement__ = 24;
          pos__ = (pos__ + 1);
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + 1 + 1 + 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "joint_gal_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ bgal = DUMMY_VAR__;
      current_statement__ = 1;
      bgal = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
               lp__);
      local_scalar_t__ clustering = DUMMY_VAR__;
      current_statement__ = 2;
      clustering = in__.template read_constrain_lb<local_scalar_t__, 
                     jacobian__>(0, lp__);
      local_scalar_t__ pshot_lim = DUMMY_VAR__;
      current_statement__ = 3;
      pshot_lim = in__.template read<local_scalar_t__>();
      local_scalar_t__ pshot_gal = DUMMY_VAR__;
      current_statement__ = 4;
      pshot_gal = in__.template read<local_scalar_t__>();
      local_scalar_t__ pshot_lim_gal = DUMMY_VAR__;
      current_statement__ = 5;
      pshot_lim_gal = in__.template read<local_scalar_t__>();
      {
        current_statement__ = 6;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(gal_pk,
            stan::math::add(
              stan::math::multiply(stan::math::multiply(pm, bgal), bgal),
              pshot_gal), sigma_gal_pk));
        current_statement__ = 7;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(lim_pk,
            stan::math::add(
              stan::math::multiply(stan::math::multiply(pm, clustering),
                clustering), pshot_lim), sigma_lim_pk));
        current_statement__ = 8;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(lim_gal_pk,
            stan::math::add(
              stan::math::multiply(stan::math::multiply(pm, clustering),
                bgal), pshot_lim_gal), sigma_lim_gal_pk));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "joint_gal_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double bgal = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      bgal = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
               lp__);
      double clustering = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      clustering = in__.template read_constrain_lb<local_scalar_t__, 
                     jacobian__>(0, lp__);
      double pshot_lim = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      pshot_lim = in__.template read<local_scalar_t__>();
      double pshot_gal = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 4;
      pshot_gal = in__.template read<local_scalar_t__>();
      double pshot_lim_gal = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 5;
      pshot_lim_gal = in__.template read<local_scalar_t__>();
      out__.write(bgal);
      out__.write(clustering);
      out__.write(pshot_lim);
      out__.write(pshot_gal);
      out__.write(pshot_lim_gal);
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ bgal = DUMMY_VAR__;
      bgal = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, bgal);
      local_scalar_t__ clustering = DUMMY_VAR__;
      clustering = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, clustering);
      local_scalar_t__ pshot_lim = DUMMY_VAR__;
      pshot_lim = in__.read<local_scalar_t__>();
      out__.write(pshot_lim);
      local_scalar_t__ pshot_gal = DUMMY_VAR__;
      pshot_gal = in__.read<local_scalar_t__>();
      out__.write(pshot_gal);
      local_scalar_t__ pshot_lim_gal = DUMMY_VAR__;
      pshot_lim_gal = in__.read<local_scalar_t__>();
      out__.write(pshot_lim_gal);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"bgal", "clustering", "pshot_lim",
      "pshot_gal", "pshot_lim_gal"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "bgal");
    param_names__.emplace_back(std::string() + "clustering");
    param_names__.emplace_back(std::string() + "pshot_lim");
    param_names__.emplace_back(std::string() + "pshot_gal");
    param_names__.emplace_back(std::string() + "pshot_lim_gal");
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "bgal");
    param_names__.emplace_back(std::string() + "clustering");
    param_names__.emplace_back(std::string() + "pshot_lim");
    param_names__.emplace_back(std::string() + "pshot_gal");
    param_names__.emplace_back(std::string() + "pshot_lim_gal");
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"bgal\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"clustering\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"pshot_lim\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"pshot_gal\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"pshot_lim_gal\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"bgal\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"clustering\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"pshot_lim\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"pshot_gal\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"pshot_lim_gal\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((1 + 1) + 1) + 1) + 1);
      const size_t num_transformed = 0;
      const size_t num_gen_quantities = 0;
      std::vector<double> vars_vec(num_params__
       + (emit_transformed_parameters * num_transformed)
       + (emit_generated_quantities * num_gen_quantities));
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((1 + 1) + 1) + 1) + 1);
      const size_t num_transformed = 0;
      const size_t num_gen_quantities = 0;
      vars.resize(num_params__
        + (emit_transformed_parameters * num_transformed)
        + (emit_generated_quantities * num_gen_quantities));
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 5> names__{"bgal", "clustering",
      "pshot_lim", "pshot_gal", "pshot_lim_gal"};
      const std::array<Eigen::Index, 5> constrain_param_sizes__{1, 1, 
       1, 1, 1};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
    
};
}
using stan_model = joint_gal_model_namespace::joint_gal_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return joint_gal_model_namespace::profiles__;
}

#endif


